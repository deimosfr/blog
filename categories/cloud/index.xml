<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloud on Deimosfr Blog</title>
    <link>https://blog.deimos.fr/categories/cloud/</link>
    <description>Recent content in Cloud on Deimosfr Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Apr 2017 20:18:07 +0200</lastBuildDate>
    
	<atom:link href="https://blog.deimos.fr/categories/cloud/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deploy Kubernetes with Ansible</title>
      <link>https://blog.deimos.fr/2017/04/18/deploy-kubernetes-with-ansible/</link>
      <pubDate>Tue, 18 Apr 2017 20:18:07 +0200</pubDate>
      
      <guid>https://blog.deimos.fr/2017/04/18/deploy-kubernetes-with-ansible/</guid>
      <description>Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications. I&amp;rsquo;m using it for Nousmotards and decided to build an Ansible role for it to make it simpler to deploy.
Why did I built it as other projects like Kargo already exists? I just wanted a simple and maintainable role based on CoreOS official documentation. That&amp;rsquo;s what I did:
 This role bootstrap a Kubernetes cluster based on CoreOS Container Linux for production usages.</description>
    </item>
    
    <item>
      <title>Deploy CoreOS with Ansible</title>
      <link>https://blog.deimos.fr/2016/09/30/deploy-coreos-with-ansible/</link>
      <pubDate>Fri, 30 Sep 2016 21:35:17 +0000</pubDate>
      
      <guid>https://blog.deimos.fr/2016/09/30/deploy-coreos-with-ansible/</guid>
      <description>&amp;nbsp;
CoreOS is a lightweight Linux operating system designed for clustered deployments providing automation, security, and scalability for your most critical applications.&amp;nbsp;I&amp;rsquo;ve been playing with CoreOS to replace Debian hosts which run Docker containers on Nousmotards project. CoreOS helps on simplifying bare metal deployment and avoid managing OS upgrade.
As I&amp;rsquo;m still an Ansible lover, I&amp;rsquo;ve made 2 roles:
 CoreOS Ansible:&amp;nbsp;Ansible role to deploy pypy to CoreOS to be able to get Ansible prerequisites CoreOS: Ansible CoreOS role to deploy CoreOS on bare metal servers  If you want to quickly look at the result:</description>
    </item>
    
    <item>
      <title>Upgrading Ansible Consul Template role</title>
      <link>https://blog.deimos.fr/2015/11/27/upgrading-ansible-consul-template-role/</link>
      <pubDate>Fri, 27 Nov 2015 21:34:03 +0000</pubDate>
      
      <guid>https://blog.deimos.fr/2015/11/27/upgrading-ansible-consul-template-role/</guid>
      <description>As I wanted to upgrade it and because it has been asked several time, I upgraded the consul-template Ansible role to manage official binaries (and upgrades). Here are the new vars:
consul_template_version:&amp;#39;0.11.0&amp;#39;consul_template_arch:&amp;#39;linux_amd64&amp;#39;consul_template_http_src:&amp;#34;https://github.com/hashicorp/consul-template/releases/download/v{{consul_template_version}}/consul_template_{{consul_template_version}}_{{consul_template_arch}}.zip&amp;#34; You can of course find the role to Ansible Galaxy: https://galaxy.ansible.com/deimosfr/consul-template/
I hope you&amp;rsquo;ll enjoy this new version :-)</description>
    </item>
    
    <item>
      <title>Ansible Meetup done! Watch again the slides</title>
      <link>https://blog.deimos.fr/2015/09/15/ansible-meetup-done-watch-again-the-slides/</link>
      <pubDate>Tue, 15 Sep 2015 21:56:06 +0000</pubDate>
      
      <guid>https://blog.deimos.fr/2015/09/15/ansible-meetup-done-watch-again-the-slides/</guid>
      <description>The Ansible meetup ended ! That was really nice for my first one.
I had really great feedbacks and liked the questions when ended. More than that I met nice people after the meetup and could have interresting discussions :-). I&amp;rsquo;m really happy about it.
For those who would like to review the slides, you can find them here:
http://nousmotards.github.io/ansible-meetup-0915/
If you want to watch the video:
http://www.infoq.com/fr/presentations/reseau-social-motard
or view the PDF version here:</description>
    </item>
    
    <item>
      <title>Offload SSL with HAProxy</title>
      <link>https://blog.deimos.fr/2015/01/27/offload-ssl-with-haproxy/</link>
      <pubDate>Tue, 27 Jan 2015 11:00:18 +0000</pubDate>
      
      <guid>https://blog.deimos.fr/2015/01/27/offload-ssl-with-haproxy/</guid>
      <description>A few months ago, I already talked about offloading SSL with Nginx. I also wanted to try it with HAProxy which can be more interesting in some cases.
The good On HAProxy, the good thing is the simplicity to do it. First of all you need to have at least the version 1.5 of HAProxy so to get SSL support. Then you only need those lines to offload SSL:</description>
    </item>
    
    <item>
      <title>Packer role available on Ansible Galaxy</title>
      <link>https://blog.deimos.fr/2015/01/22/packer-role-available-on-ansible-galaxy/</link>
      <pubDate>Thu, 22 Jan 2015 11:00:56 +0000</pubDate>
      
      <guid>https://blog.deimos.fr/2015/01/22/packer-role-available-on-ansible-galaxy/</guid>
      <description>Packer is a really great solution to make an image in several formats (VirtualBox, Docker&amp;hellip;). I recently wanted to deploy it on a Jenkins server to automatically perform image build with the help of Packer.
That&amp;rsquo;s why I&amp;rsquo;ve wrote a Packer role for Ansible really easy to use. You simply have to set (or let them by defaults) vars:
# Packer version to install packer_version: &amp;#39;0.7.5&amp;#39; # Packer destination folder packer_destination: &amp;#39;/usr/bin&amp;#39; It will install the desired version :-)</description>
    </item>
    
    <item>
      <title>Simple EC2 snapshot released !</title>
      <link>https://blog.deimos.fr/2015/01/20/simple-ec2-snapshot-released/</link>
      <pubDate>Tue, 20 Jan 2015 11:00:12 +0000</pubDate>
      
      <guid>https://blog.deimos.fr/2015/01/20/simple-ec2-snapshot-released/</guid>
      <description>For my company, I recently had to find a good solution to make Snapshots from Instance IDs or from tags on AWS. I made several searches but unfortunately didn&amp;rsquo;t find what I was searching for.
That&amp;rsquo;s why I started to make a tool to do this kind of job. It&amp;rsquo;s written in Python and requires the Boto library. Here is what you can do with Simple EC2 snapshots:
 Hot snapshots (by default) and Cold snapshots   Multiple instances snapshot in one line   Detection of doubles   Filters by tags (allowing wildcards) or by instance IDs   Credentials file multiple with profiles   Limit the number of snapshots   Restrict snapshots to data disks only   The tool is open source and can be downloaded on GitHub :-).</description>
    </item>
    
  </channel>
</rss>